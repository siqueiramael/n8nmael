version: '3.8'

services:
  n8n:
    image: n8nio/n8n:1.45.1
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=dbn8n
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=${DB_POSTGRESDB_USER}
      - DB_POSTGRESDB_PASSWORD=${DB_POSTGRESDB_PASSWORD}
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=${N8N_PORT}
      - N8N_PROTOCOL=${N8N_PROTOCOL}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_SECURE_COOKIE=true
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - TZ=${TZ}
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - dbn8n
      - appdb
    networks:
      - rede_interna
    restart: unless-stopped

  dbn8n:
    image: postgres:15-alpine
    container_name: dbn8n
    environment:
      - POSTGRES_USER=${DB_POSTGRESDB_USER}
      - POSTGRES_PASSWORD=${DB_POSTGRESDB_PASSWORD}
      - POSTGRES_DB=n8n
    volumes:
      - dbn8n_data:/var/lib/postgresql/data
    networks:
      - rede_interna
    restart: unless-stopped

  appdb:
    image: postgres:15-alpine
    container_name: appdb
    environment:
      - POSTGRES_USER=${APPDB_USER}
      - POSTGRES_PASSWORD=${APPDB_PASSWORD}
      - POSTGRES_DB=${APPDB_NAME}
    volumes:
      - appdb_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rede_interna
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${APPDB_USER} -d ${APPDB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - rede_interna
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  painel:
    build:
      context: ./painel-admin
      dockerfile: Dockerfile
    depends_on:
      appdb:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PORT=3000
      - PGHOST=appdb
      - PGUSER=${APPDB_USER}
      - PGPASSWORD=${APPDB_PASSWORD}
      - PGDATABASE=${APPDB_NAME}
      - PGPORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - JWT_SECRET=${EVOLUTION_JWT_SECRET}
    networks:
      - rede_interna
    restart: unless-stopped

  evolution-api:
    build:
      context: ./evolution-api
      dockerfile: Dockerfile
    container_name: evolution-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVER_PORT=8080
      - SERVER_URL=https://fusionmael.ddns.net/evolution
      - DATABASE_PROVIDER=postgresql
      - DATABASE_CONNECTION_URI=postgresql://appuser:Leamsi.048271@appdb:5432/appdb?schema=public
      - JWT_SECRET=elN0LnGFLdC4Q9jB3yFA5fBi55rmVnC
      - ADMIN_USER=evolution_admin
      - ADMIN_PASSWORD=Leamsi.1982
      - CORS_ORIGIN=*
      - CORS_METHODS=GET,POST,PUT,DELETE
      - CORS_CREDENTIALS=true
      - LOG_LEVEL=ERROR,WARN,INFO
      - DEL_INSTANCE=false
      - DOCKER_ENV=true
      - SKIP_MIGRATIONS=true
      - CACHE_REDIS_ENABLED=true
      - CACHE_REDIS_URI=redis://redis:6379/0
      - CACHE_REDIS_PREFIX_KEY=evolution_api
      - CACHE_REDIS_TTL=604800
      - CACHE_REDIS_SAVE_INSTANCES=false
    volumes:
      - evolution_data:/evolution/data
    depends_on:
      appdb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rede_interna
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  caddy:
    image: caddy:2
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - n8n
      - painel
      - evolution-api
    networks:
      - rede_interna
    restart: unless-stopped

volumes:
  n8n_data:
  dbn8n_data:
  appdb_data:
  caddy_data:
  caddy_config:
  evolution_data:
  redis_data:

networks:
  rede_interna: